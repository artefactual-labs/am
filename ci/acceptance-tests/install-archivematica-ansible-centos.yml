---
platform: linux

image_resource:
  type: docker-image
  source:
    repository: ubuntu
    tag: "16.04"

inputs:
- name: instance
- name: keys

run:
  path: bash
  args:
  - -xec
  - |

    #
    # ansible.cfg
    #
    cat <<EOC > ansible.cfg
    [defaults]
    nocows = 1
    allow_world_readable_tmpfiles = 1
    EOC

    #
    # requirements.yml
    #
    cat <<EOC > requirements.yml
    ---
    - src: "https://github.com/elastic/ansible-elasticsearch"
      version: "2.x"
      name: "elastic.elasticsearch"
    - src: "https://github.com/jdauphant/ansible-role-nginx"
      version: "v2.16"
      name: "jdauphant.nginx"
    - src: "https://github.com/artefactual-labs/ansible-clamav"
      version: "master"
      name: "artefactual.clamav"
    - src: "https://github.com/artefactual-labs/ansible-archivematica-src"
      version: "qa/1.7.x"
      name: "artefactual.archivematica-src"
    EOC

    #
    # playbook.yml
    #
    cat <<EOC > playbook.yml
    ---
    - hosts: "all"
      pre_tasks:
      - name: "SELinux: seboolean tweaks"
        seboolean:
          name: "{{ item }}"
          state: "yes"
          persistent: "yes"
        become: "yes"
        when: "ansible_selinux.status == 'enabled'"
        with_items:
          - "httpd_can_network_connect"        # Nginx to Gunicorn
          - "httpd_can_network_connect_db"     # Nginx to MySQL
          - "httpd_setrlimit"                  # Nginx to change system limits
      - name: "SELinux: seport tweaks"
        seport:
          ports: "8000,8001"
          proto: "tcp"
          setype: "http_port_t"
          state: "present"
        become: "yes"
        when: "ansible_selinux.status == 'enabled'"
      - name: "Enable EPEL repository"
        yum:
           name: "epel-release"
           state: "latest"
        become: "yes"
      - name: "Install mariadb-server and gearmand packages"
        yum:
          name: "{{ item }}"
          state: "latest"
        become: "yes"
        with_items:
          - "mariadb-server"
          - "gearmand"
      - name: "Enable and start mariadb-server and gearmand services"
        service:
          name: "{{ item }}"
          state: "started"
          enabled: "yes"
        become: "yes"
        with_items:
          - "mariadb"
          - "gearmand"
      - name: "Set up MySQL server and its creentials"
        shell: "{{ item }}"
        become: "yes"
        with_items:
        # See https://stackoverflow.com/a/27759061 - should we also run it?
        - mysql -e "CREATE DATABASE MCP CHARACTER SET utf8 COLLATE utf8_unicode_ci"
        - mysql -e "CREATE USER 'archivematica'@'localhost' IDENTIFIED BY 'demo'"
        - mysql -e "GRANT ALL ON MCP.* TO 'archivematica'@'localhost';"
        - mysql -e "FLUSH PRIVILEGES"
      roles:
      - role: "elastic.elasticsearch"
        es_major_version: "1.7"
        es_version: "1.7.6"
        es_heap_size: "1g"
        es_instance_name: "node1"
        es_data_dirs: "/opt/elasticsearch/data"
        es_log_dir: "/opt/elasticsearch/logs"
        es_work_dir: "/opt/elasticsearch/temp"
        es_config:
          node.name: "node1"
          cluster.name: "cluster1"
          http.port: 9200
          transport.tcp.port: 9300
          node.data: true
          node.master: true
          bootstrap.mlockall: true
          discovery.zen.ping.multicast.enabled: false
          http.max_content_length: "1024mb"
        become: "yes"
      - role: "jdauphant.nginx"
        become: "yes"
      - role: "artefactual.clamav"
        become: "yes"
      - role: "artefactual.archivematica-src"
        archivematica_src_am_version: "stable/1.7.x"
        archivematica_src_ss_version: "stable/0.11.x"
        archivematica_src_install_sample_data: "no"
        archivematica_src_install_acceptance_tests: "no"
        become: "yes"
    EOC

    #
    # bootstrap.sh
    #
    cat <<EOC > bootstrap.sh
    #!/usr/bin/env bash
    set -o errexit
    set -o nounset
    set -o xtrace
    yum -y group install "Development Tools"
    yum -y install git firewalld python-devel
    systemctl start firewalld
    systemctl enable firewalld
    firewall-cmd --permanent --add-port=22/tcp
    firewall-cmd --permanent --add-port=80/tcp
    firewall-cmd --permanent --add-port=8000/tcp
    firewall-cmd --permanent --list-all
    firewall-cmd --reload
    curl -s https://bootstrap.pypa.io/get-pip.py | python -
    pip install "ansible<2.4.0"

    # Create artefactual user
    id -u artefactual || {
      useradd -m -d /home/artefactual -s /bin/bash -U artefactual
      mkdir /home/artefactual/.ssh
      cat id_rsa.pub > /home/artefactual/.ssh/authorized_keys
      chown -R artefactual:artefactual /home/artefactual/.ssh && chmod 700 /home/artefactual/.ssh
      echo "artefactual ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
      chmod 755 /home/artefactual
    }
    EOC

    #
    # install.sh
    #
    cat <<EOC > install.sh
    #!/usr/bin/env bash
    set -o errexit
    set -o nounset
    set -o xtrace
    ansible-galaxy install -f -p roles/ -r requirements.yml
    ansible-playbook -i "localhost," -c local playbook.yml
    EOC

    chmod +x bootstrap.sh install.sh

    ip=$(cat instance/private_ip)

    apt-get -q update && apt-get install -q -y openssh-client

    # Boostrap
    scp -q -i keys/id_rsa -o StrictHostKeyChecking=no \
      bootstrap.sh keys/id_rsa.pub root@${ip}:
    ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no \
      root@${ip} ./bootstrap.sh

    # Install
    scp -q -i keys/id_rsa -o StrictHostKeyChecking=no \
      ansible.cfg requirements.yml playbook.yml install.sh artefactual@${ip}:
    ssh -q -i keys/id_rsa -o StrictHostKeyChecking=no \
      artefactual@${ip} ./install.sh
